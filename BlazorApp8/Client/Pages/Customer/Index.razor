@page "/customer/index"
@using BlazorApp8.Shared
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager _nav



<PageTitle>Customers</PageTitle>
<div class="row">
    <div class="col-md-6">
        <h1>Customers</h1>
    </div>
    <div class="col-md-6" style="text-align:right;">
        <RadzenButton Click="@(()=>_nav.NavigateTo("/customer/create"))" Text="Add" ButtonStyle="ButtonStyle.Success" Style="margin-right:4em;"/>
        <a href="/customer/create">ajouter</a>
    </div>
</div>


@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="max-width:1550px">
        <RadzenDataGrid Data="@customers" TItem="Customer" AllowSorting="true" AllowMultiColumnSorting="true" AllowPaging="true" PageSize="10"
                    AllowFiltering="true" AllowGrouping="true" AllowColumnResize="true" AllowColumnReorder="true" ColumnWidth="300px" AllowColumnPicking="true"
                    RowRender="@RowRender" ExpandMode="DataGridExpandMode.Single">
            <Template Context="customer">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@customer.Products" TItem="Product">
                    <Columns>
                        <RadzenDataGridColumn TItem="Product" Property="Product.Name" Title="Name" />
                        <RadzenDataGridColumn TItem="Product" Property="Product.Description" Title="Description" />
                        <RadzenDataGridColumn TItem="Product" Property="Product.Price" Title="Price">
                            <Template Context="detail">
                                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", detail.Price)
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn Width="60px" TItem="Customer" Property="Id" Title="ID" Filterable="false" Groupable="false" Frozen="true" Resizable="false" Reorderable="false" Pickable="false" />
                <RadzenDataGridColumn TItem="Customer" Property="FirstName" Title="First Name" Groupable="false" />
                <RadzenDataGridColumn TItem="Customer" Property="LastName" Title="Last Name" />
                <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Email" Groupable="false" />
                <RadzenDataGridColumn TItem="Customer" Property="DateNaissance" Title="Date de naissance" FilterProperty="Customer.DateNaissance" Groupable="false" />
                <RadzenDataGridColumn TItem="Customer" Title="Action" Filterable="false" Sortable="false" Groupable="false">
                    <Template Context="customer">
                        @*<RadzenButton Text="X" ButtonStyle="ButtonStyle.Danger" Click=@(() => Delete(customer.Id)) />*@
                        <RadzenButton Icon="delete" Size="ButtonSize.Medium" Click="@(() => DeleteModal(customer.Id))" @onclick:stopPropagation="true" />
                        <RadzenButton Text="view" ButtonStyle="ButtonStyle.Secondary" Click=@(() => ViewDetail(customer.Id)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@code {
    private List<Customer>? customers;
    private bool sort = false;
    private bool asc;
    private bool expand = false;
    private string keyword;
    private IDictionary<int, bool> dict = new Dictionary<int, bool>();
    RadzenDataGrid<Customer> customersGrid;
    int iiii = 5;


    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<Customer>>("Customer");
    }

    private void SortFirstName()
    {
        if (sort)
        {
            if (asc)
            {
                var query = from p in customers orderby p.FirstName descending select p;
                customers = query.ToList();
                asc = false;
            }
            else
            {
                var query = from p in customers orderby p.FirstName select p;
                customers = query.ToList();
                asc = true;
            }
        }
        else
        {
            var query = from p in customers orderby p.FirstName select p;
            customers = query.ToList();
            asc = true;
            sort = true;
        }

    }

    void RowRender(RowRenderEventArgs<Customer> args)
    {
        args.Expandable = args.Data.Products.Count() > 0;
    }

    //private async Task Delete(int id)
    //{
    //    using (var msg = await Http.DeleteAsync($"customer/{id}"))
    //    {
    //        if (msg.IsSuccessStatusCode)
    //        {
    //            customers = await Http.GetFromJsonAsync<List<Customer>>("Customer");
    //        }
    //    }
    //}

    private async Task DeleteModal(int id)
    {
        var confirmResult = await DialogService.Confirm(
        "Delete", "Are you sure");
        if (confirmResult.HasValue && confirmResult.Value)
        {
            using (var msg = await Http.DeleteAsync($"customer/{id}"))
            {
                if (msg.IsSuccessStatusCode)
                {
                    customers = await Http.GetFromJsonAsync<List<Customer>>("Customer");
                }
            }
        }
    }

    async Task ViewDetail(int CustomerId)
    {
        await DialogService.OpenAsync<View>($"Customer {CustomerId}",
              new Dictionary<string, object>() { { "CustomerID", CustomerId } },
              new DialogOptions() { Width = "700px", Height = "570px" });
    }

    private void Expand(int Id)
    {
        if (!dict.ContainsKey(Id))
        {
            dict.Add(Id, true);
        }
        else
        {
            dict[Id] = !dict[Id];
        }

    }
    private void expandall()
    {
        expand = !expand;
    }

    private void Search()
    {
        //var query = customers.Where(_ => _.FirstName == keyword);
        var query = from c in customers where c.FirstName == keyword select c;
        customers = query.ToList();
    }

}