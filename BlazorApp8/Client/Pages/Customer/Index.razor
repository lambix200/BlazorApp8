@page "/customer/index"
@using BlazorApp8.Shared
@inject HttpClient Http
@inject DialogService DialogService



<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <div class="row" style="padding:2em;">
        <div class="col-md-6">
        @if (!expand)
        {
        <RadzenButton @onclick="expandall">expand all</RadzenButton>
        }
        else
        {
        <RadzenButton @onclick="expandall">collapse all</RadzenButton>
        }
        </div>
        <div class="col-md-6">
        <form action="" method="get" class="form-example" @onsubmit="Search">
        <div class="row">
        <div class="col-md-6">
        <label for="name"></label>
        <input @bind="keyword" type="text" name="name" id="name" required placeholder="Search by firstname">
        </div>
        <div class="col-md-3">
        <input class="btn btn-primary" type="submit" value="Search">
        </div>
        <div class="col-md-3">
        <RadzenButton class="btn btn-primary" @onclick="OnInitializedAsync">Refresh</RadzenButton>
        </div>
        </div>
        </form>
        </div>
        </div>*@


    @*<div class="row">
        <table id="dtBasicExample" class="table table-striped table-bordered table-sm" cellspacing="0" width="100%">
        <thead>
        <tr>
        <th>
        </th>
        <th>Id</th>
        <th class="th-sm">
        First name
        <RadzenButton click=@SortFirstName>Sort</RadzenButton>
        </th>
        <th class="th-sm">Last name</th>
        <th class="th-sm">Email</th>
        <th class="th-sm">Age</th>
        <th class="th-sm">Date de naissance</th>
        <th class="th-sm">Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var customer in customers)
        {
        <tr>
        <td>
        @if (customer.Products != null)
        {
        <RadzenButton @onclick="() => Expand(customer.Id)">+</RadzenButton>
        }
        </td>
        <td>@customer.Id</td>
        <td>@customer.FirstName</td>
        <td>@customer.LastName</td>
        <td>@customer.Email</td>
        <td>@customer.age</td>
        <td>@customer.DateNaissance.ToShortDateString()</td>
        <td>
        <RadzenButton type="button" class="btn btn-danger">X</button>
        <a href="customer/@customer.Id">Détails</a>
        </td>
        </tr>
        @if ((customer.Products != null && expand) || (dict.ContainsKey(customer.Id) && dict[customer.Id]))
        {
        @foreach (var product in customer.Products)
        {
        <tr>
        <td>
        </td>
        <td></td>
        <td>@product.Name</td>
        <td>@product.Description</td>
        <td>@product.Price</td>
        </tr>
        }
        }
        }
        </tbody>
        </table>
        </div>*@

    <RadzenDataGrid Data="@customers" TItem="Customer" AllowSorting="true" AllowMultiColumnSorting="true" AllowPaging="true" PageSize="10"
                AllowFiltering="true">
        <Columns>
            <RadzenDataGridColumn Width="4em" TItem="Customer" Property="Id" Title="ID" Filterable="false" />
            <RadzenDataGridColumn TItem="Customer" Property="FirstName" Title="First Name" />
            <RadzenDataGridColumn TItem="Customer" Property="LastName" Title="Last Name" />
            <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Email" />
            <RadzenDataGridColumn TItem="Customer" Property="DateNaissance" Title="Date de naissance" FilterProperty="Customer.DateNaissance" />
            <RadzenDataGridColumn TItem="Customer" Title="Action" Filterable="false" Sortable="false">
                <Template Context="customer">
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#exampleModal" 
                     Click=@(() => Delete(customer.Id)) data-bs-whatever="@(customer.Id)">
                        X
                    </button>
                    <RadzenButton Text="view" ButtonStyle="ButtonStyle.Secondary" Click=@(() => ViewDetail(customer.Id)) />
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure to delete this customer ?
                    <input type="text" class="form-control" id="recipient-name">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="btnSaveIt">Yes</button>
                </div>
            </div>
        </div>
    </div>
    
}

@code {
    private Customer[]? customers;
    private bool sort = false;
    private bool asc;
    private bool expand = false;
    private string keyword;
    private IDictionary<int, bool> dict = new Dictionary<int, bool>();
    RadzenDataGrid<Customer> customersGrid;
    int iiii = 5;


    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<Customer[]>("Customer");
    }

    private void SortFirstName()
    {
        if (sort)
        {
            if (asc)
            {
                var query = from p in customers orderby p.FirstName descending select p;
                customers = query.ToArray();
                asc = false;
            }
            else
            {
                var query = from p in customers orderby p.FirstName select p;
                customers = query.ToArray();
                asc = true;
            }
        }
        else
        {
            var query = from p in customers orderby p.FirstName select p;
            customers = query.ToArray();
            asc = true;
            sort = true;
        }

    }

    private void Delete(int Id)
    {
        
    }

    async Task ViewDetail(int CustomerId)
    {
         await DialogService.OpenAsync<View>($"Customer {CustomerId}",
               new Dictionary<string, object>() { { "CustomerID", CustomerId } },
               new DialogOptions() { Width = "700px", Height = "570px" });
    }

    private void Expand(int Id)
    {
        if (!dict.ContainsKey(Id))
        {
            dict.Add(Id, true);
        }
        else
        {
            dict[Id] = !dict[Id];
        }

    }
    private void expandall()
    {
        expand = !expand;
    }

    private void Search()
    {
        //var query = customers.Where(_ => _.FirstName == keyword);
        var query = from c in customers where c.FirstName == keyword select c;
        customers = query.ToArray();
    }

}